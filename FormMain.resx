<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAABAAAAAQAAAAEAAAACAAAAAgAAAAIAAAABAAAAAQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAEAAAACAAAAAwAAAAMAAAAEAAAABQAAAAUAAAAFAAAABAAAAAQAAAADAAAAAgAA
        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAEAAAADAAAABAAAAAYAAAAIAAAACgAAAAsAAAAMAAAADAAAAAsAAAAKAAAACAAA
        AAYAAAAEAAAAAwAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAQAAAAIAAAAFAAAACAAAAAwAAAAPAAAAEgAAABQAAAAXAAAAGAAAABkAAAAYAAAAFQAA
        ABIAAAAOAAAACwAAAAcAAAAFAAAAAwAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAEAAAAEAAEBDAAAABoAAAAuAAMHPgAAAD0AAAA1AAAAMAAAAC4AAAAuAAAALQAA
        ACoAAAAkAAAAHgAAABYAAAAQAAAACwAAAAYAAAADAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAEAAAACAAAABQAAAA0AAAAgABk2UgBOrK4AWcfRAEGStgALGHgAAABZAAAATwAA
        AEoAAABGAAAAPwAAADUAAAAqAAAAHwAAABUAAAANAAAABwAAAAQAAAABAAAAAAAAAAAAAAAAAAAAAAAA
        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
        AAPgAAAD8AAAA/AAAAP4AAID///+A////gM=
</value>
  </data>
</root>